export function isObject(value){return value !==null && typeof value==='object';}export function isPlainObject(value){return isObject(value)&& Object.prototype.toString.call(value)==='[object Object]';}export function isArray(value){return Array.isArray(value);}export function isFunction(value){return typeof value==='function';}export function isString(value){return typeof value==='string';}export function isNumber(value){return typeof value==='number' && !isNaN(value);}export function isBoolean(value){return typeof value==='boolean';}export function isUndefined(value){return value===undefined;}export function isNull(value){return value===null;}export function isPrimitive(value){return value===null || typeof value==='boolean' || typeof value==='number' || typeof value==='string' || typeof value==='undefined';}export function isEmpty(value){if(isNull(value)|| isUndefined(value)){return true;}if(isString(value)|| isArray(value)){return value.length===0;}if(isObject(value)){return Object.keys(value).length===0;}return false;}export function isPromise(value){return isObject(value)&& isFunction(value.then);}export function isElement(value){return typeof HTMLElement !=='undefined' && value instanceof HTMLElement;}export function isComponent(value){return isFunction(value)||(isObject(value)&& isFunction(value.render));}export function isDefined(value){return !isUndefined(value);}export function hasOwn(obj,key){return Object.prototype.hasOwnProperty.call(obj,key);}export function isEqual(a,b){if(a===b){return true;}if(isPrimitive(a)|| isPrimitive(b)){return a===b;}if(isArray(a)&& isArray(b)){if(a.length !==b.length){return false;}for(let i=0;i < a.length;i++){if(!isEqual(a[i],b[i])){return false;}}return true;}if(isObject(a)&& isObject(b)){const keysA=Object.keys(a);const keysB=Object.keys(b);if(keysA.length !==keysB.length){return false;}for(const key of keysA){if(!hasOwn(b,key)|| !isEqual(a[key],b[key])){return false;}}return true;}return false;}export function clone(value){if(isPrimitive(value)){return value;}if(isArray(value)){return value.map(clone);}if(isObject(value)){const result={};for(const key in value){if(hasOwn(value,key)){result[key]=clone(value[key]);}}return result;}return value;}