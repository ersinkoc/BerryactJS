export default function berryactPlugin(options={}){const{jsxImportSource='@oxog/berryact',include=/\.[jt]sx?$/,exclude=/node_modules/,compat=false,optimize=true}=options;return{name: 'vite-plugin-berryact',enforce: 'pre',config(config,{mode}){return{esbuild:{jsx: 'automatic',jsxImportSource,jsxFactory: 'jsx',jsxFragment: 'Fragment',jsxInject: compat ? `import React from '${jsxImportSource}/compat'` : undefined},resolve:{alias:{...config.resolve?.alias,...(compat ?{'react': `${jsxImportSource}/compat`,'react-dom': `${jsxImportSource}/compat`,'react/jsx-runtime': `${jsxImportSource}/jsx-runtime`,'react/jsx-dev-runtime': `${jsxImportSource}/jsx-dev-runtime`}:{})}},optimizeDeps:{include:[jsxImportSource,`${jsxImportSource}/jsx-runtime`,`${jsxImportSource}/jsx-dev-runtime`],exclude: config.optimizeDeps?.exclude ||[]}};},transform(code,id){if(!include.test(id)|| exclude.test(id)){return null;}if(compat && code.includes('from "react"')|| code.includes("from 'react'")){code=code .replace(/from\s+["']react["']/g,`from '${jsxImportSource}/compat'`).replace(/from\s+["']react-dom["']/g,`from '${jsxImportSource}/compat'`);}if(code.includes('extends Component')|| code.includes('extends React.Component')){code=code.replace(/extends\s+(React\.)?Component/g,`extends Component`);}if(optimize && code.includes('html`')){code=optimizeTemplateLiterals(code);}return{code,map: null};},transformIndexHtml(html){return html.replace('</head>',` <meta name="generator" content="berryact-vite">\n</head>`);},handleHotUpdate({file,server}){if(include.test(file)){server.ws.send({type: 'custom',event: 'berryact:update',data:{file}});}}};}function optimizeTemplateLiterals(code){const staticTemplateRegex=/html`([^`]*)`/g;const staticTemplates=new Map();let templateIndex=0;code=code.replace(staticTemplateRegex,(match,template)=>{if(!template.includes('${')){const varName=`__static_template_${templateIndex++}`;staticTemplates.set(varName,match);return varName;}return match;});if(staticTemplates.size > 0){const declarations=Array.from(staticTemplates.entries()).map(([varName,template])=> `const ${varName}=${template};`).join('\n');code=declarations+'\n\n'+code;}return code;}export function createBerryactApp(){return{plugins:[berryactPlugin()],server:{port: 3000,open: true}};}