import{isSignal}from './signal.js';import{isArray,isFunction,isPrimitive}from '../utils/is.js';export const BERRYACT_ELEMENT_TYPE=Symbol.for('berryact.element');export const Fragment=Symbol.for('berryact.fragment');export const Portal=Symbol.for('berryact.portal');export function createVNode(type,props,children,key,ref){const normalizedChildren=normalizeChildren(children);return{$$typeof: BERRYACT_ELEMENT_TYPE,type,props: props ||{},children: normalizedChildren,key: key !=null ? String(key): null,ref: ref || null,_owner: null};}export function normalizeChildren(children){if(children==null || children===false || children===true){return[];}if(isPrimitive(children)){return[createTextVNode(String(children))];}if(isSignal(children)){return[createTextVNode(children)];}if(isArray(children)){const normalized=[];for(let i=0;i < children.length;i++){const child=children[i];if(child==null || child===false || child===true){continue;}if(isPrimitive(child)){normalized.push(createTextVNode(String(child)));}else if(isSignal(child)){normalized.push(createTextVNode(child));}else if(isArray(child)){normalized.push(...normalizeChildren(child));}else if(isVNode(child)){normalized.push(child);}else{normalized.push(child);}}return normalized;}if(isVNode(children)){return[children];}return[children];}export function createTextVNode(text){return{$$typeof: BERRYACT_ELEMENT_TYPE,type: '#text',props:{nodeValue: text},children:[],key: null,ref: null};}export function isVNode(obj){return obj && typeof obj==='object' && obj.$$typeof===BERRYACT_ELEMENT_TYPE;}export function createComponentVNode(component,props,children){return createVNode(component,{...props,children},null);}export function cloneVNode(vnode,newProps,newChildren){if(!isVNode(vnode)){throw new Error('cloneVNode expects a valid VNode');}const props={...vnode.props,...newProps};const children=newChildren !==undefined ? newChildren : vnode.children;return createVNode(vnode.type,props,children,vnode.key,vnode.ref);}export function getComponentName(vnode){if(!vnode)return 'Unknown';const{type}=vnode;if(typeof type==='string'){return type;}if(typeof type==='function'){return type.displayName || type.name || 'Component';}if(type===Fragment){return 'Fragment';}if(type===Portal){return 'Portal';}return 'Unknown';}export function isSameVNode(a,b){return a.type===b.type && a.key===b.key;}export function getVNodeChildren(vnode){if(!vnode || !vnode.children)return[];return isArray(vnode.children)? vnode.children :[vnode.children];}export function isComponentVNode(vnode){return vnode && isFunction(vnode.type);}export function isDOMVNode(vnode){return vnode && typeof vnode.type==='string' && vnode.type !=='#text';}export function isTextVNode(vnode){return vnode && vnode.type==='#text';}export function createPortal(children,container){return createVNode(Portal,{container},children);}