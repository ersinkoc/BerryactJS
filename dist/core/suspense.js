import{signal,effect,computed}from './signal-enhanced.js';import{createContext,useContext}from './hooks.js';import{html}from '../template/parser.js';const SuspenseContext=createContext(null);const ResourceState={PENDING: 'pending',SUCCESS: 'success',ERROR: 'error'};const resourceCache=new Map();const suspenseRegistry=new WeakMap();export function createResource(fetcher,key=null){const cacheKey=key || fetcher.toString();if(resourceCache.has(cacheKey)){return resourceCache.get(cacheKey);}const resource={state: signal(ResourceState.PENDING),data: signal(null),error: signal(null),promise: null,fetcher,key: cacheKey,version: 0};refresh();function refresh(){resource.version++;resource.state.value=ResourceState.PENDING;resource.error.value=null;resource.promise=Promise.resolve(fetcher()).then(data=>{resource.data.value=data;resource.state.value=ResourceState.SUCCESS;return data;}).catch(error=>{resource.error.value=error;resource.state.value=ResourceState.ERROR;throw error;});return resource.promise;}const resourceAPI={read(){const suspense=useContext(SuspenseContext);switch(resource.state.value){case ResourceState.PENDING: if(suspense){suspense.register(resource);}throw resource.promise;case ResourceState.ERROR: throw resource.error.value;case ResourceState.SUCCESS: return resource.data.value;}},peek(){return resource.data.value;},getState(){return resource.state.value;},isLoading(){return resource.state.value===ResourceState.PENDING;},isError(){return resource.state.value===ResourceState.ERROR;},getError(){return resource.error.value;},refresh,mutate(data){resource.data.value=data;resource.state.value=ResourceState.SUCCESS;resource.error.value=null;},subscribe(callback){return effect(()=>{callback({state: resource.state.value,data: resource.data.value,error: resource.error.value});});},clear(){resourceCache.delete(cacheKey);}};resourceCache.set(cacheKey,resourceAPI);return resourceAPI;}export function Suspense({fallback,children,onError}){const suspendedResources=signal(new Set());const hasError=signal(false);const error=signal(null);const suspenseState={register(resource){suspendedResources.value=new Set([...suspendedResources.value,resource]);},unregister(resource){const newSet=new Set(suspendedResources.value);newSet.delete(resource);suspendedResources.value=newSet;},reset(){suspendedResources.value=new Set();hasError.value=false;error.value=null;}};const isReady=computed(()=>{if(hasError.value)return false;for(const resource of suspendedResources.value){if(resource.state.value===ResourceState.PENDING){return false;}}return true;});effect(()=>{for(const resource of suspendedResources.value){if(resource.state.value===ResourceState.ERROR){hasError.value=true;error.value=resource.error.value;if(onError){onError(resource.error.value);}}}});function ErrorBoundary({error,resetError}){return html` <div class="berryact-error-boundary"> <h2>Something went wrong</h2> <p>${error.message || 'An unexpected error occurred'}</p> <button @click=${resetError}>Try again</button> </div> `;}return()=>{if(hasError.value){return ErrorBoundary({error: error.value,resetError:()=> suspenseState.reset()});}if(!isReady.value){return fallback || html`<div class="berryact-loading">Loading...</div>`;}return html` <${SuspenseContext.Provider}value=${suspenseState}> ${children}</${SuspenseContext.Provider}> `;};}export function useResource(fetcher,deps=[]){const[resource,setResource]=useState(null);useEffect(()=>{const newResource=createResource(fetcher);setResource(newResource);return()=>{newResource.clear();};},deps);return resource;}export function useDeferredValue(value,options={}){const{delay=0}=options;const[deferredValue,setDeferredValue]=useState(value);useEffect(()=>{const timeoutId=setTimeout(()=>{setDeferredValue(value);},delay);return()=> clearTimeout(timeoutId);},[value,delay]);return deferredValue;}export function useTransition(){const[isPending,setIsPending]=useState(false);const startTransition=(callback)=>{setIsPending(true);Promise.resolve().then(()=>{callback();setIsPending(false);});};return[isPending,startTransition];}export function lazy(importFn){let Component=null;let promise=null;let error=null;return function LazyComponent(props){if(error){throw error;}if(Component){return Component(props);}if(!promise){promise=importFn().then(module=>{Component=module.default || module;}).catch(err=>{error=err;throw err;});}throw promise;};}export function preload(lazyComponent){try{lazyComponent({});}catch(promise){if(promise instanceof Promise){return promise;}}return Promise.resolve();}export function createFetcher(fetchFn,options={}){const{cache=true,cacheTime=5*60*1000,retries=3,retryDelay=1000,onSuccess=null,onError=null}=options;const cacheMap=new Map();return function fetcher(...args){const key=JSON.stringify(args);if(cache && cacheMap.has(key)){const cached=cacheMap.get(key);if(Date.now()-cached.timestamp < cacheTime){return cached.data;}}const fetchWithRetry=async(attempt=0)=>{try{const data=await fetchFn(...args);if(cache){cacheMap.set(key,{data,timestamp: Date.now()});}if(onSuccess){onSuccess(data);}return data;}catch(error){if(attempt < retries-1){await new Promise(resolve=> setTimeout(resolve,retryDelay*Math.pow(2,attempt)));return fetchWithRetry(attempt+1);}if(onError){onError(error);}throw error;}};return createResource(()=> fetchWithRetry(),key);};}export function SuspenseList({children,revealOrder='together',tail='hidden'}){const items=Array.isArray(children)? children :[children];const itemStates=items.map(()=> signal(false));switch(revealOrder){case 'forwards': items.forEach((item,index)=>{if(index===0 || itemStates[index-1].value){itemStates[index].value=true;}});break;case 'backwards': items.reverse().forEach((item,index)=>{const realIndex=items.length-1-index;if(realIndex===items.length-1 || itemStates[realIndex+1].value){itemStates[realIndex].value=true;}});break;case 'together': default: const allReady=itemStates.every(state=> state.value);if(allReady){itemStates.forEach(state=> state.value=true);}break;}const visibleItems=items.filter((_,index)=>{if(tail==='collapsed'){for(let i=0;i <=index;i++){if(!itemStates[i].value)return false;}return true;}return tail==='hidden' ? itemStates[index].value : true;});return html`<div class="berryact-suspense-list">${visibleItems}</div>`;}