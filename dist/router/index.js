import{signal,computed,effect}from '../core/signal.js';import{HistoryManager,MemoryHistory}from './history.js';import{RouteGuard}from './guards.js';export class Router{constructor(options={}){this.routes=[];this.currentRoute=signal(null);this.params=signal({});this.query=signal({});this.hash=signal('');this.history=options.mode==='memory' ? new MemoryHistory(): new HistoryManager(options.mode || 'history');this.guards=new RouteGuard();this.baseUrl=options.base || '';this.notFoundComponent=options.notFound ||(()=> 'Page not found');if(options.routes){this.addRoutes(options.routes);}this.init();}init(){this.history.listen(()=>{if(this.history.mode==='memory'){this.handleLocationChangeSync();}else{this.handleLocationChange();}});if(this.history.mode==='memory'){this.handleLocationChangeSync();}else{this.handleLocationChange();}}addRoute(path,component,options={}){const normalizedPath=this.normalizePath(path);const routeData=this.pathToRegex(normalizedPath);const route={path: normalizedPath,component,name: options.name,beforeEnter: options.beforeEnter,meta: options.meta ||{},children: options.children ||[],regex: routeData.regex,keys: routeData.keys};if(options.children){route.children=options.children.map(child=>{const childPath=this.normalizePath(path+'/'+child.path);const childRouteData=this.pathToRegex(childPath);return{...child,path: childPath,regex: childRouteData.regex,keys: childRouteData.keys,parent: route};});}this.routes.push(route);return this;}addRoutes(routes){routes.forEach(route=>{this.addRoute(route.path,route.component,route);});return this;}navigate(to,options={}){if(typeof to==='string'){return this.push(to,options);}if(to.name){return this.pushNamed(to.name,to.params,to.query);}return this.push(to.path,options);}push(path,options={}){const url=this.resolveUrl(path);if(options.replace){this.history.replace(url);}else{this.history.push(url);}}replace(path){this.push(path,{replace: true});}go(delta){this.history.go(delta);}back(){this.history.back();}forward(){this.history.forward();}pushNamed(name,params={},query={}){const route=this.routes.find(r=> r.name===name);if(!route){throw new Error(`Route with name "${name}" not found`);}let path=route.path;Object.entries(params).forEach(([key,value])=>{path=path.replace(`:${key}`,value);});const queryString=this.buildQueryString(query);const fullPath=queryString ? `${path}?${queryString}` : path;this.push(fullPath);}async handleLocationChange(){const location=this.history.getCurrentLocation();const{pathname,search,hash}=location;this.hash.value=hash.startsWith('#')? hash.slice(1): hash;this.query.value=this.parseQuery(search);const route=this.matchRoute(pathname);if(!route){this.currentRoute.value={path: pathname,component: this.notFoundComponent,params:{},meta:{},matched:[]};this.params.value={};return;}try{const canActivate=await this.guards.canActivate(route,this.currentRoute.value);if(!canActivate){return;}this.params.value=route.params;this.currentRoute.value=route;}catch(error){if(error.name==='NavigationRedirect'){this.push(error.location);return;}throw error;}}handleLocationChangeSync(){const location=this.history.getCurrentLocation();const{pathname,search,hash}=location;this.hash.value=hash.startsWith('#')? hash.slice(1): hash;this.query.value=this.parseQuery(search);const route=this.matchRoute(pathname);if(!route){this.currentRoute.value={path: pathname,component: this.notFoundComponent,params:{},meta:{},matched:[]};this.params.value={};return;}if(this.history.mode==='memory'){try{const canActivate=this.runGuardsSync(route,this.currentRoute.value);if(!canActivate){return;}this.params.value=route.params;this.currentRoute.value=route;return;}catch(error){if(error.name==='NavigationRedirect'){this.push(error.location);return;}throw error;}}this.handleLocationChange();}runGuardsSync(to,from){const guards=[...this.guards.globalGuards.beforeEach,...(to.beforeEnter ?[to.beforeEnter]:[])];for(const guard of guards){try{let guardResult;let guardCalled=false;const next=(result)=>{guardCalled=true;guardResult=result;};const result=guard(to,from,next);if(!guardCalled){guardResult=result;}if(guardResult===false){return false;}if(typeof guardResult==='string'){throw new(class NavigationRedirect extends Error{constructor(location){super('Navigation redirected');this.name='NavigationRedirect';this.location=location;}})(guardResult);}}catch(error){this.guards.handleError(error,to,from);if(error.name==='NavigationRedirect'){throw error;}return false;}}this.guards.globalGuards.afterEach.forEach(guard=>{try{guard(to,from);}catch(error){this.guards.handleError(error,to,from);}});return true;}matchRoute(path){const normalizedPath=this.normalizePath(path);for(const route of this.routes){const match=this.testRoute(route,normalizedPath);if(match){return match;}for(const child of route.children){const childMatch=this.testRoute(child,normalizedPath);if(childMatch){childMatch.parent=route;return childMatch;}}}return null;}testRoute(route,path){const match=route.regex.exec(path);if(!match){return null;}const params={};route.keys.forEach((key,index)=>{params[key.name]=match[index+1];});return{path: route.path,component: route.component,params,meta: route.meta,matched:[route],name: route.name};}pathToRegex(path){const keys=[];let regex=path .replace(/:([^\/]+)/g,(match,key)=>{keys.push({name: key});return '([^/]+)';}).replace(/\ .replace(/\*/g,'.*');const routeData={keys,regex: new RegExp(`^${regex}$`)};return routeData;}normalizePath(path){if(!path.startsWith('/')){path='/'+path;}if(this.baseUrl){path=this.baseUrl+path;}return path.replace(/\/+/g,'/');}resolveUrl(path){if(path.startsWith('http')){return path;}if(path.includes('#')){return path;}return this.normalizePath(path);}parseQuery(search){const query={};if(!search){return query;}if(search.startsWith('?')){search=search.slice(1);}if(search.trim()){search.split('&').forEach(param=>{const[key,value='']=param.split('=');if(key){query[decodeURIComponent(key)]=decodeURIComponent(value);}});}return query;}buildQueryString(query){return Object.entries(query).map(([key,value])=> `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&');}beforeEach(guard){this.guards.addGlobalGuard('beforeEach',guard);}afterEach(guard){this.guards.addGlobalGuard('afterEach',guard);}onError(handler){this.guards.onError(handler);}getCurrentRoute(){return this.currentRoute.value;}isCurrentRoute(path){return this.currentRoute.value?.path===this.normalizePath(path);}}export function createRouter(options){return new Router(options);}