export function createLogger(options={}){const{collapsed=true,filter=()=> true,transformer=state=> state,mutationTransformer=mut=> mut,actionFilter=()=> true,actionTransformer=act=> act,logMutations=true,logActions=true,logger=console}=options;return store=>{let prevState=transformer(store.state.value);if(logMutations){store.subscribe((mutation,state)=>{if(!filter(mutation,prevState,state))return;const formattedTime=new Date().toLocaleTimeString();const formattedMutation=mutationTransformer(mutation);const message=`mutation ${mutation.type}@${formattedTime}`;if(collapsed){logger.groupCollapsed(message);}else{logger.group(message);}logger.log('%c prev state','color: #9E9E9E;font-weight: bold',transformer(prevState));logger.log('%c mutation','color: #03A9F4;font-weight: bold',formattedMutation);logger.log('%c next state','color: #4CAF50;font-weight: bold',transformer(state));logger.groupEnd();prevState=transformer(state);});}if(logActions){store.subscribeAction((action,state)=>{if(!actionFilter(action,state))return;const formattedTime=new Date().toLocaleTimeString();const formattedAction=actionTransformer(action);const message=`action ${action.type}@${formattedTime}`;if(collapsed){logger.groupCollapsed(message);}else{logger.group(message);}logger.log('%c action','color: #FF9800;font-weight: bold',formattedAction);logger.groupEnd();});}};}export function createPersistedState(options={}){const{key='berryact-store',paths=[],reducer=state=> state,subscriber=store=> handler=> store.subscribe(handler),storage=localStorage,getState=(key,storage)=>{const value=storage.getItem(key);return value ? JSON.parse(value): undefined;},setState=(key,state,storage)=>{storage.setItem(key,JSON.stringify(state));}}=options;return store=>{const savedState=getState(key,storage);if(savedState){store.replaceState(Object.assign({},store.state.value,savedState));}subscriber(store)((mutation,state)=>{let stateToSave=state;if(paths.length > 0){stateToSave={};paths.forEach(path=>{const value=getNestedProperty(state,path);setNestedProperty(stateToSave,path,value);});}setState(key,reducer(stateToSave),storage);});};}export function createMultiTabSync(options={}){const{key='berryact-store-sync',storage=localStorage}=options;return store=>{const handleStorageChange=(e)=>{if(e.key===key && e.newValue){try{const newState=JSON.parse(e.newValue);store.replaceState(newState);}catch(error){console.error('Failed to sync state from storage:',error);}}};window.addEventListener('storage',handleStorageChange);store.subscribe((mutation,state)=>{try{storage.setItem(key,JSON.stringify(state));}catch(error){console.error('Failed to save state to storage:',error);}});return()=>{window.removeEventListener('storage',handleStorageChange);};};}export function createSnapshot(options={}){const{maxSnapshots=10,snapshotInterval=1000*60}=options;return store=>{const snapshots=[];let lastSnapshotTime=0;const takeSnapshot=()=>{const now=Date.now();if(now-lastSnapshotTime < snapshotInterval){return;}const snapshot={state: JSON.parse(JSON.stringify(store.state.value)),timestamp: now};snapshots.push(snapshot);if(snapshots.length > maxSnapshots){snapshots.shift();}lastSnapshotTime=now;};store.subscribe(()=>{takeSnapshot();});store.getSnapshots=()=> snapshots.slice();store.restoreSnapshot=(index)=>{if(index >=0 && index < snapshots.length){const snapshot=snapshots[index];store.replaceState(snapshot.state);return true;}return false;};};}export function createDevtools(options={}){const{name='Berryact Store',maxAge=50}=options;return store=>{if(typeof window==='undefined' || !window.__REDUX_DEVTOOLS_EXTENSION__){return;}const devtools=window.__REDUX_DEVTOOLS_EXTENSION__.connect({name,maxAge});devtools.init(store.state.value);store.subscribe((mutation,state)=>{devtools.send(mutation,state);});devtools.subscribe((message)=>{if(message.type==='DISPATCH'){switch(message.payload.type){case 'RESET': devtools.init(store.state.value);break;case 'COMMIT': devtools.init(store.state.value);break;case 'ROLLBACK': const parsedState=JSON.parse(message.state);store.replaceState(parsedState);devtools.init(parsedState);break;case 'JUMP_TO_STATE': case 'JUMP_TO_ACTION': const jumpState=JSON.parse(message.state);store.replaceState(jumpState);break;}}});};}export function createThrottledUpdates(options={}){const{delay=100,leading=true,trailing=true}=options;return store=>{let timeoutId=null;let lastCallTime=0;const callbacks=[];const throttledSubscribe=(callback)=>{callbacks.push(callback);return()=>{const index=callbacks.indexOf(callback);if(index >=0){callbacks.splice(index,1);}};};const executeCallbacks=(mutation,state)=>{callbacks.forEach(callback=>{try{callback(mutation,state);}catch(error){console.error('Throttled callback error:',error);}});};store.subscribe((mutation,state)=>{const now=Date.now();if(leading &&(now-lastCallTime)>=delay){executeCallbacks(mutation,state);lastCallTime=now;}if(trailing){clearTimeout(timeoutId);timeoutId=setTimeout(()=>{if((Date.now()-lastCallTime)>=delay){executeCallbacks(mutation,state);lastCallTime=Date.now();}},delay-(now-lastCallTime));}});store.throttledSubscribe=throttledSubscribe;};}function getNestedProperty(obj,path){return path.split('.').reduce((current,key)=>{return current && current[key];},obj);}function setNestedProperty(obj,path,value){const keys=path.split('.');const lastKey=keys.pop();const target=keys.reduce((current,key)=>{if(!current[key]){current[key]={};}return current[key];},obj);target[lastKey]=value;}