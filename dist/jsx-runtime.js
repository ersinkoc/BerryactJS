import{createVNode,normalizeChildren,Fragment as BerryactFragment}from './core/vdom.js';import{isSignal}from './core/signal.js';export const BERRYACT_ELEMENT_TYPE=Symbol.for('berryact.element');function transformProps(props){if(!props)return null;const transformed={};for(const key in props){const value=props[key];if(key==='key' || key==='ref' || key==='__self' || key==='__source'){continue;}if(key==='className'){transformed.class=value;}else if(key.startsWith('on')&& key.length > 2 && key[2]===key[2].toUpperCase()){const eventName=key[2].toLowerCase()+key.slice(3);transformed[`on${eventName}`]=value;}else if(key==='htmlFor'){transformed.for=value;}else if(key==='style' && typeof value==='object' && !isSignal(value)){const styleStr=Object.entries(value).map(([prop,val])=>{const cssProp=prop.replace(/[A-Z]/g,match=> `-${match.toLowerCase()}`);return `${cssProp}: ${val}`;}).join(';');transformed.style=styleStr;}else if(key==='dangerouslySetInnerHTML' && value && value.__html){transformed.innerHTML=value.__html;}else{transformed[key]=value;}}return transformed;}export function jsx(type,config,maybeKey){const props={};let key=null;let ref=null;if(config !=null){if(config.key !==undefined){key=''+config.key;}if(config.ref !==undefined){ref=config.ref;}for(const propName in config){if(propName !=='key' && propName !=='ref' && propName !=='__self' && propName !=='__source'){props[propName]=config[propName];}}}if(maybeKey !==undefined){key=''+maybeKey;}const{children,...restProps}=props;const berryactProps=transformProps(restProps);return createVNode(type,berryactProps,normalizeChildren(children),key,ref);}export function jsxs(type,config,maybeKey){return jsx(type,config,maybeKey);}export const Fragment=BerryactFragment;export function isValidElement(object){return(typeof object==='object' && object !==null && object.$$typeof===BERRYACT_ELEMENT_TYPE);}export function cloneElement(element,config,...children){if(!isValidElement(element)){throw new Error('cloneElement requires a valid Berryact element');}const props=Object.assign({},element.props);let key=element.key;let ref=element.ref;if(config !=null){if(config.ref !==undefined){ref=config.ref;}if(config.key !==undefined){key=''+config.key;}for(const propName in config){if(propName !=='key' && propName !=='ref' && propName !=='__self' && propName !=='__source'){props[propName]=config[propName];}}}if(children.length > 0){props.children=children.length===1 ? children[0]: children;}return jsx(element.type,{...props,key,ref});}export function createElement(type,config,...children){const props={...config};if(children.length===1){props.children=children[0];}else if(children.length > 1){props.children=children;}return jsx(type,props);}