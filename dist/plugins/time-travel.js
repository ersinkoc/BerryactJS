import{signal,computed,effect}from '../core/signal-enhanced.js';import{createPlugin}from '../core/plugin.js';export const TimeTravelPlugin=createPlugin({name: 'time-travel',version: '1.0.0',setup(app,context){const options=this.options ||{};const{maxHistory=50,throttle=100,blacklist=[],whitelist=null,stateName='time-travel',persistHistory=false,storageKey='berryact-time-travel'}=options;const history=signal([]);const currentIndex=signal(-1);const isRecording=signal(true);const isPaused=signal(false);let lastCapture=0;let captureTimeout=null;const canUndo=computed(()=> currentIndex.value > 0);const canRedo=computed(()=> currentIndex.value < history.value.length-1);const currentState=computed(()=>{const index=currentIndex.value;return index >=0 ? history.value[index]: null;});const trackedStores=new Map();const trackedSignals=new Map();function captureState(label=null){if(!isRecording.value || isPaused.value)return;const now=Date.now();if(now-lastCapture < throttle){clearTimeout(captureTimeout);captureTimeout=setTimeout(()=> captureState(label),throttle);return;}lastCapture=now;const snapshot={timestamp: now,label: label || `State ${history.value.length+1}`,stores:{},signals:{},metadata:{url: window.location.href,userAgent: navigator.userAgent}};trackedStores.forEach((store,name)=>{if(shouldTrack(name)){snapshot.stores[name]=JSON.parse(JSON.stringify(store.state.value));}});trackedSignals.forEach((signal,name)=>{if(shouldTrack(name)){try{snapshot.signals[name]=JSON.parse(JSON.stringify(signal.value));}catch(e){snapshot.signals[name]=String(signal.value);}}});addToHistory(snapshot);}function addToHistory(snapshot){const newHistory=[...history.value];if(currentIndex.value < newHistory.length-1){newHistory.splice(currentIndex.value+1);}newHistory.push(snapshot);if(newHistory.length > maxHistory){newHistory.shift();}history.value=newHistory;currentIndex.value=newHistory.length-1;if(persistHistory){saveHistory();}}function shouldTrack(name){if(whitelist){return whitelist.includes(name);}return !blacklist.includes(name);}function travelTo(index){if(index < 0 || index >=history.value.length)return;const snapshot=history.value[index];if(!snapshot)return;isPaused.value=true;try{Object.entries(snapshot.stores).forEach(([name,state])=>{const store=trackedStores.get(name);if(store){store.replaceState(state);}});Object.entries(snapshot.signals).forEach(([name,value])=>{const signal=trackedSignals.get(name);if(signal){signal.value=value;}});currentIndex.value=index;}finally{setTimeout(()=>{isPaused.value=false;},100);}}function undo(){if(canUndo.value){travelTo(currentIndex.value-1);}}function redo(){if(canRedo.value){travelTo(currentIndex.value+1);}}function jumpToState(index){travelTo(index);}function clearHistory(){history.value=[];currentIndex.value=-1;if(persistHistory){localStorage.removeItem(storageKey);}}function exportHistory(){return{version: '1.0.0',plugin: 'time-travel',history: history.value,currentIndex: currentIndex.value,metadata:{exported: new Date().toISOString(),appVersion: app.version}};}function importHistory(data){if(!data || data.plugin !=='time-travel'){throw new Error('Invalid history data');}history.value=data.history ||[];currentIndex.value=data.currentIndex ||-1;}function saveHistory(){try{const data=exportHistory();localStorage.setItem(storageKey,JSON.stringify(data));}catch(e){console.error('Failed to save history:',e);}}function loadHistory(){try{const data=localStorage.getItem(storageKey);if(data){importHistory(JSON.parse(data));}}catch(e){console.error('Failed to load history:',e);}}function diff(indexA,indexB){const stateA=history.value[indexA];const stateB=history.value[indexB];if(!stateA || !stateB)return null;const changes={stores:{},signals:{}};Object.keys(stateA.stores).forEach(name=>{const valueA=stateA.stores[name];const valueB=stateB.stores[name];if(JSON.stringify(valueA)!==JSON.stringify(valueB)){changes.stores[name]={before: valueA,after: valueB};}});Object.keys(stateA.signals).forEach(name=>{const valueA=stateA.signals[name];const valueB=stateB.signals[name];if(valueA !==valueB){changes.signals[name]={before: valueA,after: valueB};}});return changes;}function trackStore(name,store){trackedStores.set(name,store);store.subscribe(()=>{captureState(`Store ${name}mutation`);});}function trackSignal(name,signal){trackedSignals.set(name,signal);effect(()=>{signal.value;captureState(`Signal ${name}change`);});}if(typeof window !=='undefined'){window.addEventListener('keydown',(e)=>{if((e.ctrlKey || e.metaKey)&& e.key==='z' && !e.shiftKey){e.preventDefault();undo();}if((e.ctrlKey || e.metaKey)&& e.shiftKey && e.key==='z'){e.preventDefault();redo();}});}this.registerAppHook('store',(store)=>{trackStore('main',store);});if(persistHistory){loadHistory();}const timeTravel={history,currentIndex,isRecording,canUndo,canRedo,currentState,undo,redo,jumpToState,clearHistory,captureState,trackStore,trackSignal,exportHistory,importHistory,saveHistory,loadHistory,diff,startRecording:()=> isRecording.value=true,stopRecording:()=> isRecording.value=false,pause:()=> isPaused.value=true,resume:()=> isPaused.value=false};this.provide('timeTravel',timeTravel);app.timeTravel=timeTravel;if(typeof window !=='undefined'){window.__NANO_TIME_TRAVEL__=timeTravel;}}});export function TimeTravelDebugger({position='bottom-right'}){const timeTravel=app.timeTravel;if(!timeTravel)return null;const{history,currentIndex,canUndo,canRedo}=timeTravel;const[isOpen,setIsOpen]=useState(false);const[selectedIndex,setSelectedIndex]=useState(null);const positionStyles={'bottom-right':{bottom: 20,right: 20},'bottom-left':{bottom: 20,left: 20},'top-right':{top: 20,right: 20},'top-left':{top: 20,left: 20}};const style={position: 'fixed',...positionStyles[position],zIndex: 9999,background: 'white',border: '1px solid #ddd',borderRadius: '8px',boxShadow: '0 4px 12px rgba(0,0,0,0.15)',fontFamily: 'monospace',fontSize: '12px'};return html` <div style=${style}> ${!isOpen ? html` <button style=${{padding: '8px 12px',background: '#007bff',color: 'white',border: 'none',borderRadius: '6px',cursor: 'pointer'}}@click=${()=> setIsOpen(true)}> ⏱ Time Travel </button> ` : html` <div style=${{width: '300px',maxHeight: '400px',display: 'flex',flexDirection: 'column'}}> <div style=${{padding: '10px',borderBottom: '1px solid #eee',display: 'flex',justifyContent: 'space-between',alignItems: 'center'}}> <strong>Time Travel Debugger</strong> <button style=${{background: 'none',border: 'none',cursor: 'pointer'}}@click=${()=> setIsOpen(false)}> ✕ </button> </div> <div style=${{padding: '10px',borderBottom: '1px solid #eee'}}> <button @click=${()=> timeTravel.undo()}disabled=${!canUndo.value}style=${{marginRight: '5px'}}> ← Undo </button> <button @click=${()=> timeTravel.redo()}disabled=${!canRedo.value}style=${{marginRight: '5px'}}> Redo → </button> <button @click=${()=> timeTravel.clearHistory()}> Clear </button> </div> <div style=${{flex: 1,overflow: 'auto',padding: '10px'}}> ${history.value.map((state,index)=> html` <div style=${{padding: '5px',margin: '2px 0',background: index===currentIndex.value ? '#e3f2fd' : '#f5f5f5',borderRadius: '4px',cursor: 'pointer',border: index===selectedIndex ? '2px solid #2196f3' : 'none'}}@click=${()=>{setSelectedIndex(index);timeTravel.jumpToState(index);}}> <div style=${{fontWeight: 'bold'}}>${state.label}</div> <div style=${{fontSize: '10px',color: '#666'}}> ${new Date(state.timestamp).toLocaleTimeString()}</div> </div> `)}</div> ${selectedIndex !==null && html` <div style=${{padding: '10px',borderTop: '1px solid #eee',fontSize: '10px'}}> <strong>State Diff:</strong> <pre style=${{margin: '5px 0',overflow: 'auto',maxHeight: '100px'}}> ${JSON.stringify(timeTravel.diff(currentIndex.value,selectedIndex),null,2)}</pre> </div> `}</div> `}</div> `;}